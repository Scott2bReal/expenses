#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  attr_reader :connection

  # rubocop:disable Metrics/LineLength
  def add_expense(amount, memo)
    sql = "INSERT INTO expenses(amount, memo, created_on) VALUES ($1, $2, NOW())"
    connection.exec_params(sql, [amount, memo])
  end
  # rubocop:enable Metrics/LineLength

  def list_expenses
    result = connection.exec('SELECT * FROM expenses;')

    display_count(result)
    display_result(result)
  end

  def search_expenses(search_term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = connection.exec_params(sql, ["%#{search_term}%"])

    display_count(result)
    display_result(result)
  end

  def delete_expense(id)
    if id_exists?(id)
      display_delete_message(id)
      sql = "DELETE FROM expenses WHERE id = $1"
      connection.exec_params(sql, [id])
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def delete_all_expenses
    connection.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted"
  end

  private

  def setup_schema
    count = connection.exec("SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';")

    schema = File.read("./sql/schema.sql")

    connection.exec(schema) unless count == 1
  end

  def display_count(result)
    count = result.ntuples

    if count.positive?
      puts "There are #{count} expenses."
    else
      puts "There are no expenses"
    end
  end

  def display_total(result)
    total = result.sum { |row| row["amount"].to_f }
    puts <<~SUM
      -------------------------------------------
      Total #{total.to_s.rjust(18)}
      SUM
  end

  def display_delete_message(id)
    puts 'The following expense has been deleted:'
    display_result(get_row_by_id(id))
  end

  def display_result(result)
    result.each do |tuple|
      columns = [tuple['id'].rjust(3),
                 tuple['created_on'].rjust(10),
                 tuple['amount'].rjust(9 - tuple['amount'].length),
                 tuple['memo']]
      puts columns.join(' | ')
    end

    display_total(result) if result.ntuples.positive?
  end

  def get_row_by_id(id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    connection.exec_params(sql, [id])
  end

  def id_exists?(id)
    result = get_row_by_id(id)
    result.ntuples == 1
  end
end

class CLI
  def initialize
    @data = ExpenseData.new
  end

  attr_reader :data

  def run(args)
    command = args.first

    case command
    when 'list'
      data.list_expenses
    when 'add'
      amount = args[1]
      memo = args[2]
      abort "You must provide an amount and a memo." unless amount && memo
      data.add_expense(amount, memo)
    when 'search'
      term = args[1]
      data.search_expenses(term)
    when 'delete'
      id = args[1]
      abort "You must provide an expense id." unless id
      data.delete_expense(id)
    when 'clear'
      puts 'This will remove all expenses. Are you sure? (y/n)'
      answer = $stdin.getch
      data.delete_all_expenses if answer == 'y'
    else
      display_help
    end
  end

  private

  def display_help
    msg = <<~MSG
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
      MSG

    puts msg
  end
end

CLI.new.run(ARGV)
